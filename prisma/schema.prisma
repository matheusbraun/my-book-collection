// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")

    relationMode = "prisma"
}

enum CategoryType {
    BOOK
    MANGA
    MANHWA
    COMIC
}

model Book {
    id              String @db.VarChar(255)       @id @default(cuid())
    userId          String @db.VarChar(255)
    category        CategoryType
    name            String @db.VarChar(255)       @unique
    numberOfVolumes Int
    isCompleted     Boolean
    createdAt       DateTime     @default(now())
    updatedAt       DateTime     @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
    id                String @db.VarChar(255)  @id @default(cuid())
    userId            String @db.VarChar(255)
    type              String @db.VarChar(255)
    provider          String @db.VarChar(255)
    providerAccountId String @db.VarChar(255)
    refresh_token     String? @db.VarChar(255)
    access_token      String? @db.VarChar(255)
    expires_at        Int?
    token_type        String? @db.VarChar(255)
    scope             String? @db.VarChar(255)
    id_token          String? @db.VarChar(255)
    session_state     String? @db.VarChar(255)
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String @db.VarChar(255)   @id @default(cuid())
    sessionToken String @db.VarChar(255)   @unique
    userId       String @db.VarChar(255)
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String   @db.VarChar(255)  @id @default(cuid())
    name          String? @db.VarChar(255)
    email         String? @db.VarChar(255)   @unique
    emailVerified DateTime?
    image         String? @db.VarChar(255)
    accounts      Account[]
    sessions      Session[]
    books         Book[]
}

model VerificationToken {
    identifier String @db.VarChar(255)
    token      String @db.VarChar(255)   @unique
    expires    DateTime

    @@unique([identifier, token])
}
